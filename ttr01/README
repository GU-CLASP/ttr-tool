Installation

You will need to install Oz/Mozart from http://www.mozart-oz.org (this
version of TTRtool is compatible with 1.4.0.).  I
have used Mac OS X (10.7.5) and there should be no problems
with unix or linux systems. You will also need to have emacs
installed.  I am not sure whether some minor tweaks
would be necessary to run the system under Windows.  Let me know if
you want to do this and have problems.

Unfortunately Mozart does not give you everything you need by
installing it out of the box.  You need to do the following:

    sudo -s
    ln -s /Applications/Mozart.app/Contents/Resources /usr/local/mozart

and then edit the file /usr/local/mozart/bin/oz (while still being a
superuser) e.g. by opening emacs from the command line

    open -na emacs /usr/local/mozart/bin/oz

Uncomment the line 

    OZHOME=/usr/local/mozart

near the beginning of the file by removing the '#' at the beginning.
Save the file and exit emacs.  You can now exit sudo:

     exit




Set an environment variable TTRHOME to the directory in which you find
this file, e.g. if you are using bash, include 
     export TTRHOME=/Path/to/this/directory
in your .profile.

In a terminal, change directory to this directory and run make:
   make
This should compile everything that needs to be compiled.

(If you do not have make on Mac OS X, you need to install Xcode from
the App Store and include the component "Command Line Tools").



Usage

Start the oz emacs interface:
      
    oz&

You can now open .oz files in the normal emacs way and execute
("feed") paragraphs of code (between blank lines) by placing the
cursor somewhere in the paragraph and typing C-M-x.

The examples directory contains reliable examples which are meant to
work.  Files start with one or two paragraphs beginning with
"declare".  You need to execute these in order before executing the
examples.  You can then execute the example paragraphs (normally
involving Inspect) one-by-one to see displays of results.


The tests directory contains files that I'm using to test modules under
development.  They are less reliable and more messy but can sometimes
be used for demos if you can figure out what they're supposed to do.
These files may contain a debugging preamble which looks like this:

declare
[DebugFile] = {Module.link ['../ttr/debug.ozf']}
Debug = DebugFile.debug
{Debug no}

You may safely ignore this and just execute the first and the third
declare paragraphs before moving on to the examples below.

You can give yourself a tutorial on TTR and TTRtool by studying files
in the following order:

    1) examples/example-records.oz -- TTR records implemented as Oz
    records, basic operations of flattening and relabelling.

    2) examples/example-types.oz -- introduces basic types, proof types
    (what I now call ptypes, i.e. types formed with predicates) and an
    "is of type" relation - e.g. {IsOfType a 'Ind'} is the code for
    a:Ind.  This uses the types specified in
    ttr/default-{btypes,pred,model}.oz .  (Sometime soon there will be
    a higher level representation of such files so you don't have to
    mess with the oz-code...).  We also introduce IsSupported for
    non-empty types, function types, functions, function application,
    beta conversion, dependent function types, type instantiation
    (with abstract objects used in subtyping computations),
    join types, meet types, simplification of meets and joins,
    subtyping, list types, singleton types, types defined in terms of
    the operators 'append' and 'apply', type instantiation in a model.

    3) examples/example-rectypes.oz -- introduces record types
    implemented as Oz records, with instantiation, subtyping, relative
    and absolute paths, simplification of meets (unification) and joins,
    simplification of dependent types within records.

    4) examples/example-minigram-sem-eng.oz  This provides a toy grammar
    that does a little discourse anaphora.  There is only one command
    to execute at the bottom of this file (after you have executed the
    two paragraphs beginning with 'declare').  This will provide you
    with a parse input window and some other windows for output.  You
    can type
    
	Kim runs

    or
	Kim
	runs
    
    That is, the parser is incremental and will do whatever it can
    with one or more words adding them to the chart.  If you want to
    start from an empty chart, choose Chart/New Chart from the menus
    in the Parse Input window.  The default setting is to show you the
    whole chart.  This can be changed in the Chart Show menu.  If
    you're interested in seeing edges for complete discourses you can
    choose "Show longest edges with cat... d".  If you change settings
    using these menus you need only type return in order to get the
    new representation for what you have parsed so far.  You probably don't
    want to see the complete edges either.  In the 'Edge Show' menu
    you can choose, for example, to see only the cnt-field
    corresponding to semantic interpretation.  (Show dialogue move is
    not relevant for this grammar.)  There are various options for
    showing content in the Edge Show menu.  The most abbreviated (and
    readable) is the one at the bottom.  The Input menu allows you to
    type sort of semantic representations as input and get back the
    type.  (Again DMove is not relevant for this grammar.)  The menu
    Generation output controls what you get back when your input is
    not a string of words.  To see the full power and coverage of this
    grammar (ahem)  try parsing

        kim owns a donkey he likes it

   Display the content on the option "instantiated and flattened" from
   the "Edge Show" menu.  Now middle-click (or maybe right-click) on
   the label "rectype" at the root of the record type and choose
   Actions/Resolve.  The result of anaphora resolution will appear in
   another Inspector window.  You can middle-click on the rectype
   label of the resolved type and choose Actions/AbbrevDep to
   abbreviate the dependent types and obtain a readable version of the type.

   5) examples/example-minigram-sem-swe.oz  This is the Swedish version
   of minigram.  It uses the same abstract syntax and semantics.
   Check out the files grammars/mini

   6) examples/example-minigram-sem-eng_swe.oz  This is a merge of the
   Swedish and English minigrammars.  It will parse English and
   Swedish and "code-switching" examples such as

   kim äger en donkey

   Select ID structure in the Input menu and type

   s_np_vp('Kim' 'Run')

   in the input window and you will get output in both languages

   A variant is to select FunArg structure in the Input menu and type

   apply('Kim' 'Run')

   Check out the code for merging the two grammars in
   grammars/mini/minigram-sem-eng_swe.oz

   7)  examples/example-toy1-abs-domain-eng.oz and
   examples/example-toy1-abs-domain-swe.oz  This is an implementation
   of the toy1 grammar from Putting Linguistics into Speech
   Recognition: The Regulus Grammar Compiler M. Rayner, B.A. Hockey
   and P. Bouillon. CSLI Press, 2006.  It illustrates how ontologies
   can be coded in TTR and integrated in grammar.  The English and
   Swedish grammars share the same abstract syntax and domain
   (ontology).  Grammatical coverage is specified in
   tests/toy1-coverage.txt.  Grammar files are in grammars/toy1/

   8) examples/example-fishgram-eng.oz This is a tiny study of how
   tools for agreement phenomena in a particular language can be
   imported from a universal syntax resource (ures/ures-syntax.oz).
   Grammar files in grammars/fish/

   9) examples/example-bear-eng.oz Another tiny study of how you can
   parse to and generate from dialogue moves.  Try selecting DMove in
   the Input menu and typing presentEval('Nice' 'Bear') in the Parse
   Input window.  Grammar files in grammars/bear/  Note how dialogue
   moves are defined in terms of constructions (in something like the
   sense of contruction grammar) in _abstract_ syntax.

